generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  level                Int                   @default(1)
  xp                   Int                   @default(0)
  createdAt            DateTime              @default(now())
  image                String
  name                 String                @unique
  updatedAt            DateTime              @updatedAt
  clerkId              String                @unique
  challengeCompletions ChallengeCompletion[]
  sectionCompletions   SectionCompletion[]
}

model StudyPlan {
  id                   String                @id @default(cuid())
  title                String
  description          String
  img                  String
  challenges           Challenge[]
  challengeCompletions ChallengeCompletion[]
  sections             Section[]
  sectionCompletions   SectionCompletion[]
}

model Section {
  id          String              @id @default(cuid())
  title       String
  order       Int
  studyPlanId String
  exercises   Exercise[]
  studyPlan   StudyPlan           @relation(fields: [studyPlanId], references: [id])
  completions SectionCompletion[]
  subsections SubSection[]
}

model SectionCompletion {
  id          String    @id @default(cuid())
  userId      String
  studyPlanId String
  sectionId   String
  completedAt DateTime? @default(now())
  section     Section   @relation(fields: [sectionId], references: [id])
  studyPlan   StudyPlan @relation(fields: [studyPlanId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, sectionId])
}

model Challenge {
  id          String                @id @default(cuid())
  title       String
  prompt      String
  starterCode String?
  order       Int
  studyPlanId String
  studyPlan   StudyPlan             @relation(fields: [studyPlanId], references: [id])
  completions ChallengeCompletion[]
  testCases   TestCase[]
}

model TestCase {
  id          String    @id @default(cuid())
  input       String
  expected    String
  isHidden    Boolean   @default(false)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
}

model ChallengeCompletion {
  id          String    @id @default(cuid())
  userId      String
  studyPlanId String
  challengeId String
  completedAt DateTime? @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  studyPlan   StudyPlan @relation(fields: [studyPlanId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, challengeId])
}

model Exercise {
  id        String       @id @default(cuid())
  type      ExerciseType
  question  String
  answer    String
  sectionId String
  options   String[]
  section   Section      @relation(fields: [sectionId], references: [id])
}

model SubSection {
  id        String  @id @default(cuid())
  title     String
  content   String
  example   String
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])
}

enum ExerciseType {
  TRUE_FALSE
  MCQ
  FILL_BLANK
}
